{
	// Place your code-that-writes-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "lib-schema": {
    "scope": "json",
    "prefix": "lib1-schema",
    "body": [
      "\"properties\": {",
      "  \"directory\": {",
      "    \"type\": \"string\",",
      "    \"description\": \"A directory where the library is placed.\",",
      "    \"x-prompt\": \"Which directory do you want to create the library in?\"",
      "  },",
      "  \"subtitle\": {",
      "    \"type\": \"string\",",
      "    \"description\": \"A subtitle for the library.\",",
      "    \"x-prompt\": \"What is the subtitle of the library?\"",
      "  },",
      "  \"description\": {",
      "    \"type\": \"string\",",
      "    \"description\": \"A description of the library.\",",
      "    \"x-prompt\": \"What is the description of the library?\"",
      "  },",
      "  \"targetApp\": {",
      "    \"type\": \"string\",",
      "    \"description\": \"The name of the target application where the library will be created.\",",
      "    \"x-prompt\": \"Which application do you want to create the library in?\",",
      "    \"default\": \"my-app\"",
      "  }",
      "},",
      "\"required\": [\"directory\", \"targetApp\"]",
    ],
    "description": "k-lib generator schema snippet"
  },
  "lib-schema-implementation": {
    "scope": "javascript,typescript",
    "prefix": "lib2-schema-implementation",
    "body": [
      "export interface KLibGeneratorSchema {",
      "  directory: string;",
      "  targetApp: string;",
      "  subtitle?: string;",
      "  description?: string;",
      "}",
      "export interface GeneratorOptions extends KLibGeneratorSchema {",
      "  name: string;",
      "  prettyName: string;",
      "  route: string;",
      "  importPath: string;",
      "  componentName: string;",
      "}",
    ],
    "description": "k-lib generator schema implementation snippet"
  },
  "normalize-options": {
    "scope": "javascript,typescript",
    "prefix": "lib3-normalize-options",
    "body": [
      "const normalizedOptions = normalizeOptions(options);",
      "",
      "const schema: Schema = {",
      "  ...normalizedOptions,",
      "  buildable: true,",
      "  publishable: true,",
      "  standalone: true,",
      "  changeDetection: 'OnPush',",
      "  style: 'scss',",
      "};",
    ],
    "description": "k-lib normalize options snippet"
  },
  "normalize-options-implementation": {
    "scope": "javascript,typescript",
    "prefix": "lib4-normalize-options-implementation",
    "body": [
      "function normalizeOptions(",
      "  options: KLibGeneratorSchema",
      "): GeneratorOptions {",
      "    const name = getLastPartOfPath(options.directory).toLowerCase();",
      "    const componentName = names(name).className;",
      "    const prettyName = prettifyName(name);",
      "    const subtitle = options.subtitle ?? `\\${prettyName} Subtitle`;",
      "    const description =",
      "      options.description ??",
      "      `This is the default description for the \\${prettyName} library. It provides essential features and functionalities that enhance the overall user experience.`;",
      "    const route = names(name).fileName;",
      "    const importPath = `@kathrine0/${names(name).fileName}`;",
      "",
      "    return {",
      "      ...options,",
      "      name,",
      "      componentName,",
      "      subtitle,",
      "      description,",
      "      route,",
      "      importPath,",
      "      prettyName,",
      "    };",
      "  }",
      "",
      "function prettifyName(name: string): string {",
      "  return name",
      "    .split('-')",
      "    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))",
      "    .join(' ');",
      "}",
      "",
      "function getLastPartOfPath(path: string): string {",
      "  const parts = path.split('/');",
      "  return parts[parts.length - 1];",
      "}"
    ],
    "description": "k-lib normalize options implementation snippet"
  },
  "modify-plugin-json": {
    "scope": "javascript,typescript",
    "prefix": "lib5-modify-plugin-json",
    "body": [
      "function modifyPluginJson(tree: Tree, options: GeneratorOptions) {",
      "  const targetProjectRoot = getProjects(tree).get(",
      "    options.targetApp",
      "  )?.sourceRoot;",
      "",
      "  if (!targetProjectRoot) {",
      "    throw new Error(`Target project \"\\${options.targetApp}\" not found.`);",
      "  }",
      "",
      "  const pluginsPath = path.join(targetProjectRoot, 'plugins.json');",
      "  if (!tree.exists(pluginsPath)) {",
      "    tree.write(pluginsPath, JSON.stringify([], null, 2));",
      "  }",
      "",
      "  updateJson(tree, pluginsPath, (json) => {",
      "    if (!json.some((p) => p.name === options.name)) {",
      "      json.push({",
      "        name: options.prettyName,",
      "        subtitle: options.subtitle,",
      "        description: options.description,",
      "        route: options.route,",
      "      });",
      "    }",
      "",
      "    return json;",
      "  });",
      "}",
    ],
    "description": "k-lib modify plugin.json snippet"
  },
  "modify-app-routes": {
    "scope": "javascript,typescript",
    "prefix": "lib6-modify-app-routes",
    "body": [
      "// import * as j from 'jscodeshift';",
      "// import { parse } from 'recast/parsers/typescript';",
      "function modifyAppRoutes(tree: Tree, options: GeneratorOptions) {",
      "  const targetProjectRoot = getProjects(tree).get(",
      "    options.targetApp",
      "  )?.sourceRoot;",
      "",
      "  if (!targetProjectRoot) {",
      "    throw new Error(`Target project \"\\${options.targetApp}\" not found.`);",
      "  }",
      "",
      "  const routesPath = path.join(targetProjectRoot, 'app', 'app.routes.ts');",

      "  if (!tree.exists(routesPath)) {",
      "    throw new Error(`Routes file \"\\${routesPath}\" does not exist.`);",
      "  }",

      "  const routeTemplate = `",
      "    ({",
      "      path: '${options.route}',",
      "      loadComponent: () => import('${options.importPath}').then((m) => m.${options.componentName})",
      "    })",
      "  `;",
      "",
      "  const content = tree.read(routesPath, 'utf-8');",
      "  if (!content) {",
      "    throw new Error(`Could not read routes file \"\\${routesPath}\".`);",
      "  }",
      "",
      "  const newContent = j(content, { parser: { parse } })",
      "    .find(j.ExportNamedDeclaration)",
      "    .find(j.VariableDeclaration)",
      "    .find(j.ArrayExpression)",
      "    .forEach((path) => {",
      "      const tsNode = j(routeTemplate).find(j.ObjectExpression).get(0).node;",
      "      path.node.elements.push(tsNode);",
      "    })",
      "    .toSource({ quote: 'single', trailingComma: true });",
      "",
      "  tree.write(routesPath, newContent);",
      "}",
    ],
    "description": "k-lib modify app routes snippet"
  },
  "app-generator": {
    "scope": "javascript,typescript",
    "prefix": "app1-generator",
    "body": [
      "const normalizedOptions = {",
      "  ...options,",
      "  directory: `apps/${options.name}`,",
      "};",
      "",
      "await applicationGenerator(tree, {",
      "  ...normalizedOptions,",
      "  skipFormat: true,",
      "  e2eTestRunner: E2eTestRunner.None,",
      "  style: 'scss',",
      "});",
      "",
      "generateAdditionalFiles(tree, normalizedOptions);",
      "",
      "const tasks: GeneratorCallback[] = [];",
      "tasks.push(",
      "  addDependenciesToPackageJson(",
      "    tree,",
      "    { '@angular/material': '~20.1.0', '@angular/cdk': '~20.1.0' },",
      "    {}",
      "  )",
      ");",
      "",
      "await formatFiles(tree);",
      "",
      "return runTasksInSerial(...tasks);",
    ],
    "description": "k-app generator snippet"
  },
  "generate-app-files": {
    "scope": "javascript,typescript",
    "prefix": "app2-generate-files",
    "body": [
      "function generateAdditionalFiles(",
      "  tree: Tree,",
      "  normalizedOptions: KAppGeneratorSchema & { directory: string }",
      ") {",
      "  const projectRoot = normalizedOptions.directory;",
      "  const srcFolder = path.join(__dirname, 'files');",
      "",
      "  const target = path.relative(",
      "    path.join(tree.root),",
      "    path.join(process.cwd(), projectRoot)",
      "  );",
      "",
      "  tree.delete(joinPathFragments(target, 'src', 'app'));",
      "",
      "  generateFiles(tree, srcFolder, target, {",
      "    ...normalizedOptions,",
      "    prettyName: prettifyName(normalizedOptions.name),",
      "  });",
      "}",
      "",
      "function prettifyName(name: string): string {",
      "  return name",
      "    .split('-')",
      "    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))",
      "    .join(' ');",
      "}"
    ],
    "description": "k-app generate additional files snippet"
  },
  "preset": {
    "scope": "javascript,typescript",
    "prefix": "preset-generator",
    "body": [
      "return await import('../k-app/k-app').then(({ kAppGenerator }) =>",
      "  kAppGenerator(tree, options)",
      ");",
    ],
    "description": "k-preset generator snippet"
  }
}
